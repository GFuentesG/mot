type TaskStatus = 
 variant {
   completed;
   pending;
 };
type TaskId = nat32;
type Task = 
 record {
   description: text;
   id: TaskId;
   owner: principal;
   status: TaskStatus;
 };
type ProfileWithCountryDetails = 
 record {
   countryDetails: text;
   profile: Profile;
 };
type Profile = 
 record {
   country: text;
   email: text;
   owner: principal;
   username: text;
 };
type GetTaskResultOk = 
 variant {
   task: Task;
   taskAddedSuccessfully;
   taskStatusUpdatedSuccessfully;
   tasks: vec Task;
   theTaskWasDeleted;
 };
type GetTaskResultErr = 
 variant {
   countryDataNotFound;
   errModuleHttp;
   taskIsAlreadyInTheRequestedStatus;
   taskNotAdded;
   taskNotFound;
   taskNotFoundOrYouDoNotOwnThisTask;
   userDoesNotExist;
   userNotAuthenticated;
   youAreNotTheOwnerOfThisTask;
   youDoNotHavePermissionToViewThisTask;
 };
type GetTaskResult = 
 variant {
   err: GetTaskResultErr;
   ok: GetTaskResultOk;
 };
type GetProfileResultOk = 
 variant {
   profile: Profile;
   profiles: vec Profile;
   userSuccessfullyAdded;
   userSuccessfullyDeleted;
 };
type GetProfileResultErr = 
 variant {
   countryDataNotFound;
   unregisteredUser_nameOrEmailIsInvalid;
   userDoesNotExist;
   userNotAuthenticated;
 };
type GetProfileResult = 
 variant {
   err: GetProfileResultErr;
   ok: GetProfileResultOk;
 };
type GetProfileCountryResult = 
 variant {
   err: GetProfileResultErr;
   ok: ProfileWithCountryDetails;
 };
service : {
  addProfile: (Profile) -> (GetProfileResult);
  addTaskToProfile: (text, text) -> (GetTaskResult);
  delProfile: (text) -> (GetProfileResult);
  getProfile: (text) -> (GetProfileCountryResult);
  getProfiles: () -> (GetProfileResult) query;
  listTasksForUser: (text) -> (GetTaskResult);
  whoami: () -> (principal) query;
}
